name: Build and Upload EasyKit

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build EasyKit Packages
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create required directories
        shell: pwsh
        run: |
          if (-not (Test-Path "build")) { New-Item -Path "build" -ItemType Directory }
          if (-not (Test-Path "dist")) { New-Item -Path "dist" -ItemType Directory }
          
          # Ensure images directory exists and has necessary files
          if (-not (Test-Path "images")) { New-Item -Path "images" -ItemType Directory }
          
          # Generate required images if they don't exist
          if (-not (Test-Path "images\installer-welcome.bmp")) {
            Add-Type -AssemblyName System.Drawing
            $bmp = New-Object System.Drawing.Bitmap 164, 314
            $g = [System.Drawing.Graphics]::FromImage($bmp)
            $g.Clear([System.Drawing.Color]::LightBlue)
            $font = New-Object System.Drawing.Font("Arial", 14)
            $brush = [System.Drawing.Brushes]::Black
            $g.DrawString("EasyKit Installer", $font, $brush, 20, 150)
            $bmp.Save("images\installer-welcome.bmp", [System.Drawing.Imaging.ImageFormat]::Bmp)
            $g.Dispose()
            $bmp.Dispose()
            Write-Host "Created installer-welcome.bmp"
          }

          if (-not (Test-Path "images\installer-header.bmp")) {
            Add-Type -AssemblyName System.Drawing
            $bmp = New-Object System.Drawing.Bitmap 150, 57
            $g = [System.Drawing.Graphics]::FromImage($bmp)
            $g.Clear([System.Drawing.Color]::LightGreen)
            $font = New-Object System.Drawing.Font("Arial", 10)
            $brush = [System.Drawing.Brushes]::Black
            $g.DrawString("EasyKit", $font, $brush, 50, 20)
            $bmp.Save("images\installer-header.bmp", [System.Drawing.Imaging.ImageFormat]::Bmp)
            $g.Dispose()
            $bmp.Dispose()
            Write-Host "Created installer-header.bmp"
          }

      - name: Build ZIP package
        shell: pwsh
        run: |
          Compress-Archive -Path *.bat,*.nsi,README.md,LICENSE,images\* -DestinationPath build\EasyKit.zip -Force
          Write-Host "Created EasyKit.zip package in build directory"

      - name: Setup NSIS
        uses: joncloud/makensis-action@v4
        with:
          script-file: EasyKit.nsi

      - name: Prepare NSIS installation
        shell: pwsh
        run: |
          # Modify NSIS script to avoid EnVar plugin issues
          $content = Get-Content -Path .\EasyKit.nsi -Raw
          
          # Update output path to be directly in build folder
          $content = $content -replace 'OutFile "dist\\EasyKit_Setup.exe"', 'OutFile "build\EasyKit_Setup.exe"'
          
          # Completely remove the PATH section to avoid EnVar plugin issues
          $pathSectionPattern = '(?s)Section "Add to PATH" SecPath.*?EndSection'
          $content = $content -replace $pathSectionPattern, '; Section "Add to PATH" - Removed for CI compatibility'
          
          # Also remove the description for the PATH section
          $content = $content -replace '!insertmacro MUI_DESCRIPTION_TEXT \$\{SecPath\} ".*?"', '; PATH section description removed'
          
          # Remove EnVar from uninstaller section
          $content = $content -replace 'EnVar::DeleteValue "PATH" "\$INSTDIR"', '; EnVar::DeleteValue "PATH" "$INSTDIR" - Removed for CI compatibility'
          
          # Fix desktop shortcut section
          $content = $content -replace '(CreateShortcut "\$DESKTOP\\EasyKit.lnk" "\$INSTDIR\\run_eskit.bat")(\s+)', '$1 "" $2'
          $content = $content -replace '(CreateShortcut "\$SMPROGRAMS\\EasyKit\\EasyKit.lnk" "\$INSTDIR\\run_eskit.bat")(\s+)', '$1 "" $2'
          $content = $content -replace '(CreateShortcut "\$SMPROGRAMS\\EasyKit\\Uninstall.lnk" "\$INSTDIR\\uninstall.exe")(\s+)', '$1 "" $2'
          
          # Create backup for debugging
          Copy-Item -Path .\EasyKit.nsi -Destination .\EasyKit.nsi.bak
          
          Set-Content -Path .\EasyKit.nsi -Value $content
          Write-Host "Modified NSIS script for GitHub Actions compatibility"

      - name: Build NSIS installer
        shell: pwsh
        run: |
          try {
            # Run the NSIS compiler with verbose output
            & makensis -V4 .\EasyKit.nsi
            if ($LASTEXITCODE -ne 0) {
              Write-Host "NSIS build failed with exit code $LASTEXITCODE"
              
              # Display the NSIS script content for debugging
              Write-Host "=== NSIS Script Content ==="
              Get-Content -Path .\EasyKit.nsi
              Write-Host "=== End of NSIS Script Content ==="
              
              exit $LASTEXITCODE
            }
          } catch {
            Write-Host "Exception occurred: $_"
            exit 1
          }
          
          # Check if the installer was created in the build directory
          if (Test-Path "build\EasyKit_Setup.exe") {
            Write-Host "NSIS installer created successfully in build directory"
          } else {
            Write-Host "Looking for installer in other locations..."
            Get-ChildItem -Path . -Recurse -Filter "EasyKit_Setup.exe" | ForEach-Object {
              Write-Host "Found installer at: $($_.FullName)"
              if (-not (Test-Path "build\EasyKit_Setup.exe")) {
                Copy-Item -Path $_.FullName -Destination "build\EasyKit_Setup.exe" -Force
                Write-Host "Copied installer to build directory"
              }
            }
          }

      - name: Verify build artifacts
        shell: pwsh
        run: |
          if (-not (Test-Path "build\EasyKit.zip")) {
            Write-Host "ERROR: EasyKit.zip was not created!"
            exit 1
          }
          if (-not (Test-Path "build\EasyKit_Setup.exe")) {
            Write-Host "ERROR: EasyKit_Setup.exe was not created!"
            exit 1
          }
          Get-ChildItem -Path "build"
          Write-Host "Build artifacts verified successfully"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EasyKit-Packages
          path: |
            build/EasyKit.zip
            build/EasyKit_Setup.exe
          retention-days: 14

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: EasyKit-Packages
          path: release-artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-artifacts/EasyKit.zip
            release-artifacts/EasyKit_Setup.exe
          draft: false
          fail_on_unmatched_files: true
          generate_release_notes: true
